{"version":3,"sources":["actions/index.js","constants/ActionTypes.js","components/TaskForm.js","components/Search.js","components/Sort.js","components/Control.js","components/TaskItem.js","components/TaskList.js","App.js","serviceWorker.js","reducers/tasks.js","reducers/isDisplayForm.js","reducers/itemEditing.js","reducers/filterTable.js","reducers/search.js","reducers/sort.js","reducers/index.js","index.js"],"names":["editTask","task","type","TaskForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onCloseForm","onChange","event","target","name","value","setState","defineProperty","onSubmit","preventDefault","onSaveTask","state","onClear","status","id","itemEditing","nextProps","isDisplayForm","react_default","a","createElement","className","onClick","Component","connect","dispatch","actions","onToggleForm","Search","keyword","onSearch","onSearchTask","placeholder","Sort","sortBy","sortValue","onSortTask","by","_this2","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","role","sort","Control","components_Search","components_Sort","TaskItem","onUpdateStatus","onDelete","onDeleteTask","onUpdate","onEditTask","onOpenForm","_this$props","index","TaskList","checked","filter","filterName","filterStatus","onFilterTable","tasks","filterTable","toLowerCase","indexOf","b","_this$state","elmTasks","map","components_TaskItem","key","search","App","onClearTask","components_TaskForm","components_Control","components_TaskList","Boolean","window","location","hostname","match","s4","Math","floor","random","toString","substring","findIndex","result","forEach","data","JSON","parse","localStorage","getItem","initialState","myReducer","arguments","length","undefined","action","temp","push","setItem","stringify","toConsumableArray","objectSpread","splice","parseInt","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.156ae6d5.chunk.js","sourcesContent":["import * as types from './../constants/ActionTypes';\r\nexport const listAll = () => {\r\n    return {\r\n        type: types.LIST_ALL\r\n    }\r\n};\r\nexport const saveTask = (task) => {\r\n    return {\r\n        type: types.SAVE_TASK,\r\n        task // task : task\r\n    }\r\n};\r\nexport const toggleForm = () => {\r\n    return {\r\n        type : types.TOGGLE_FORM\r\n    }\r\n};\r\nexport const openForm = () => {\r\n    return {\r\n        type : types.OPEN_FORM\r\n    }\r\n};\r\nexport const closeForm = () => {\r\n    return {\r\n        type : types.CLOSE_FORM\r\n    }\r\n};\r\nexport const updateStatus = (id) => {\r\n    return {\r\n        type : types.UPDATE_STATUS_TASK,\r\n        id // id : id\r\n    }\r\n};\r\nexport const deleteTask = (id) => {\r\n    return {\r\n        type : types.DELETE_TASK,\r\n        id // id : id\r\n    }\r\n};\r\nexport const editTask = (task) => {\r\n    return {\r\n        type : types.EDIT_TASK,\r\n        task // id : id\r\n    }\r\n};\r\nexport const filterTask = (filter) => {\r\n    return {\r\n        type : types.FILTER_TABLE,\r\n        filter // filter : filterName, filterStatus\r\n    }\r\n};\r\nexport const searchTask = (keyword) => {\r\n    return {\r\n        type : types.SEARCH,\r\n        keyword // keyword : keyword\r\n    }\r\n};\r\nexport const sortTask = (sort) => {\r\n    return {\r\n        type : types.SORT,\r\n        sort // sort : sortBy, sortValue\r\n    }\r\n};","export const LIST_ALL = 'LIST_ALL';\r\nexport const SAVE_TASK = 'SAVE_TASK';\r\nexport const TOGGLE_FORM = 'TOGGLE_FORM';\r\nexport const CLOSE_FORM = 'CLOSE_FORM';\r\nexport const OPEN_FORM = 'OPEN_FORM';\r\nexport const UPDATE_STATUS_TASK = 'UPDATE_STATUS_TASK';\r\nexport const DELETE_TASK = 'DELETE_TASK';\r\nexport const EDIT_TASK = 'EDIT_TASK';\r\nexport const FILTER_TABLE = 'FILTER_TABLE';\r\nexport const SEARCH = 'SEARCH';\r\nexport const SORT = 'SORT';","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from './../actions/index';\r\nclass TaskForm extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            id: '',\r\n            name: '',\r\n            status: false\r\n        };\r\n    }\r\n\r\n    componentWillMount(){\r\n        if(this.props.itemEditing && this.props.itemEditing.id !== null){\r\n            this.setState({\r\n               id: this.props.itemEditing.id, \r\n               name: this.props.itemEditing.name,\r\n               status: this.props.itemEditing.status\r\n            });\r\n        }else{\r\n            this.onClear();\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        if(nextProps && nextProps.itemEditing){\r\n            this.setState({\r\n               id: nextProps.itemEditing.id, \r\n               name: nextProps.itemEditing.name,\r\n               status: nextProps.itemEditing.status\r\n            });\r\n        }else {\r\n            this.onClear();\r\n        }\r\n    }\r\n\r\n    onCloseForm = () => {\r\n        this.props.onCloseForm();\r\n    }\r\n\r\n    onChange = (event) =>{\r\n        var target = event.target;\r\n        var name = target.name;\r\n        var value = target.value;\r\n        if(name==='status'){\r\n            value = target.value === 'true'? true:false;\r\n        }\r\n        this.setState({\r\n            [name] : value\r\n        });\r\n    }\r\n\r\n    onSubmit = (event) =>{\r\n        event.preventDefault();\r\n        this.props.onSaveTask(this.state);\r\n        // close form & cancle\r\n        this.onClear();\r\n        this.onCloseForm();\r\n    }\r\n\r\n    onClear = () =>{\r\n        this.setState({\r\n            name: '',\r\n            status: false\r\n        });\r\n    }\r\n\r\n    render() {\r\n        var { id } = this.state;\r\n        if(!this.props.isDisplayForm) return '';\r\n        return (\r\n      \t\t<div className=\"panel panel-warning\">\r\n                <div className=\"panel-heading\">\r\n                    <h3 className=\"panel-title\">\r\n                        { id?'Update Job':'Add Job'}\r\n                        <span\r\n                            className=\"fa fa-times-circle text-right\"\r\n                            onClick={this.onCloseForm}\r\n                        >\r\n                        </span>\r\n                    </h3>\r\n                </div>\r\n                <div className=\"panel-body\">\r\n                    <form onSubmit={this.onSubmit}>\r\n                        <div className=\"form-group\">\r\n                            <label>Tên :</label>\r\n                            <input \r\n                                type=\"text\" \r\n                                name=\"name\"\r\n                                className=\"form-control\"\r\n                                value={this.state.name} \r\n                                onChange={this.onChange}\r\n                            />\r\n                        </div>\r\n                        <label>Trạng Thái :</label>\r\n                        <select \r\n                            name=\"status\"\r\n                            className=\"form-control\"\r\n                            value={this.state.status} \r\n                            onChange={this.onChange}\r\n                        >\r\n                            <option value={true}>Kích Hoạt</option>\r\n                            <option value={false}>Ẩn</option>\r\n                        </select>\r\n                        <br/>\r\n                        <div className=\"text-center\">\r\n                            <button type=\"submit\" className=\"btn btn-warning\">Save</button>&nbsp;\r\n                            <button \r\n                                type=\"button\" \r\n                                className=\"btn btn-danger\"\r\n                                onClick={this.onClear}\r\n                            >Cancel</button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isDisplayForm : state.isDisplayForm,\r\n        itemEditing : state.itemEditing\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n        onSaveTask : (task) => {\r\n            dispatch(actions.saveTask(task));\r\n        },\r\n        onCloseForm : () =>{\r\n            dispatch(actions.closeForm());\r\n        },\r\n        onToggleForm : () =>{\r\n            dispatch(actions.toggleForm());\r\n        }\r\n    }\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskForm);\r\n","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from './../actions/index';\r\nclass Search extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n             keyword: ''\r\n        }\r\n    }\r\n    onChange = (event) =>{\r\n       this.setState({\r\n            keyword : event.target.value\r\n        });\r\n\r\n    }\r\n    onSearch = () =>{\r\n        this.props.onSearchTask(this.state.keyword);\r\n    }\r\n    render() {\r\n        var { keyword } = this.state;\r\n        return (\r\n            <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                <div className=\"input-group\">\r\n                    <input \r\n                        type=\"text\" \r\n                        className=\"form-control\" \r\n                        placeholder=\"Nhập từ khóa...\" \r\n                        name=\"keyword\"\r\n                        value={ keyword}\r\n                        onChange={ this.onChange }\r\n                    />\r\n                    <span className=\"input-group-btn\">\r\n                        <button \r\n                            className=\"btn btn-primary\" \r\n                            type=\"submit\"\r\n                            onClick={this.onSearch}\r\n                        >\r\n                            <span className=\"fa fa-search mr-5\"></span>Tìm\r\n                        </button>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {};\r\n};\r\nconst mapDispatchToProps = (dispatch, props) =>{\r\n    return {\r\n        onSearchTask : (keyword) =>{\r\n            dispatch(actions.searchTask(keyword));\r\n        }\r\n    };\r\n};\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Search);\r\n","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from './../actions/index';\r\nclass Sort extends Component {\r\n    \r\n    onClick = (sortBy,sortValue) =>{\r\n        this.props.onSortTask({\r\n            by: sortBy,\r\n            value: sortValue\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                <div className=\"dropdown\">\r\n                    <button className=\"btn btn-primary dropdown-toggle\" type=\"button\" id=\"dropdownMenu1\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\">\r\n                         Sắp Xếp <span className=\"fa fa-caret-square-o-down ml-5\"></span>\r\n                    </button>\r\n                    <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\r\n                        <li onClick={() =>this.onClick('name',1)}>\r\n                            <span role=\"button\" className={(this.props.sort.by === 'name' && this.props.sort.value ===1)?'sort_selected':''}>\r\n                                <span className=\"fa fa-sort-alpha-asc pr-5\">\r\n                                     Tên A-Z\r\n                                </span>\r\n                            </span>\r\n                        </li>\r\n                        <li onClick={() =>this.onClick('name',-1)}>\r\n                            <span role=\"button\" className={(this.props.sort.by === 'name' && this.props.sort.value === -1)?'sort_selected':''}>\r\n                                <span className=\"fa fa-sort-alpha-desc pr-5\">\r\n                                     Tên Z-A\r\n                                </span>\r\n                            </span>\r\n                        </li>\r\n                        <li role=\"separator\" className=\"divider\"></li>\r\n                        <li onClick={() =>this.onClick('status',1)}><span role=\"button\" className={(this.props.sort.by === 'status' && this.props.sort.value ===1)?'sort_selected':''}>Trạng Thái Kích Hoạt</span></li>\r\n                        <li onClick={() =>this.onClick('status',-1)}><span role=\"button\" className={(this.props.sort.by === 'status' && this.props.sort.value === -1)?'sort_selected':''}>Trạng Thái Ẩn</span></li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        sort : state.sort\r\n    };\r\n};\r\nconst mapDispatchToProps = (dispatch, props) =>{\r\n    return {\r\n        onSortTask : (sort) =>{\r\n            dispatch(actions.sortTask(sort));\r\n        }\r\n    };\r\n};\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Sort);\r\n","import React, { Component } from 'react';\r\nimport Search from './Search';\r\nimport Sort from './Sort';\r\nclass Control extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"row mt-15\">\r\n                <Search/>\r\n                <Sort/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Control;\r\n","import React, { Component } from 'react';\r\nimport  {connect} from 'react-redux';\r\nimport * as actions from './../actions/index';\r\nclass TaskItem extends Component {\r\n    onUpdateStatus = () =>{\r\n        this.props.onUpdateStatus(this.props.task.id);\r\n    }\r\n    onDelete = () =>{\r\n        this.props.onDeleteTask(this.props.task.id);\r\n        this.props.onCloseForm();\r\n    }\r\n    onUpdate = () =>{\r\n        this.props.onEditTask(this.props.task);\r\n        this.props.onOpenForm(); // dispatch action open form\r\n    }\r\n    render() {\r\n        var {task, index} = this.props;\r\n        return (\r\n            <tr>\r\n                <td>{index +1}</td>\r\n                <td>{task.name}</td>\r\n                <td className=\"text-center\">\r\n                    <span \r\n                        className={task.status === true ? 'label label-danger': 'label label-success'}\r\n                        onClick={this.onUpdateStatus}\r\n                    >\r\n                        {task.status === true ? 'Active': 'Hide'}\r\n                    </span>\r\n                </td>\r\n                <td className=\"text-center\">\r\n                    <button \r\n                        type=\"button\" \r\n                        className=\"btn btn-warning\"\r\n                        onClick={this.onUpdate}\r\n                    >\r\n                        <span className=\"fa fa-pencil mr-5\"></span>Sửa\r\n                    </button>\r\n                    &nbsp;\r\n                    <button  \r\n                        type=\"button\" \r\n                        className=\"btn btn-danger\"\r\n                        onClick={this.onDelete}\r\n                    >\r\n                        <span className=\"fa fa-trash mr-5\"></span>Xóa\r\n                    </button>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {};\r\n};\r\nconst mapDispatchToProps = (dispatch, props) =>{\r\n    return {\r\n        onUpdateStatus : (id) =>{\r\n            dispatch(actions.updateStatus(id));\r\n        },\r\n        onDeleteTask : (id) =>{\r\n            dispatch(actions.deleteTask(id));\r\n        },\r\n        onCloseForm : () =>{\r\n            dispatch(actions.closeForm());\r\n        },\r\n        onOpenForm : () =>{\r\n            dispatch(actions.openForm());\r\n        },\r\n        onEditTask : (task) =>{\r\n            dispatch(actions.editTask(task));\r\n        }\r\n    };\r\n};\r\nexport default connect(mapStateToProps,mapDispatchToProps)(TaskItem);\r\n","import React, { Component } from 'react';\r\nimport TaskItem from './TaskItem';\r\nimport  {connect} from 'react-redux';\r\nimport * as actions from './../actions/index';\r\nclass TaskList extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            filterName: '',\r\n            filterStatus: -1 // all: -1 / active: 1 / deactive: 0        \r\n        }\r\n    }\r\n    onChange = (event) =>{\r\n        var target = event.target;\r\n        var name = target.name;\r\n        var value = target.type === 'checkbox' ? target.checked : target.value;\r\n        var filter = {\r\n            name: name==='filterName'? value : this.state.filterName,\r\n            status: name==='filterStatus'? value : this.state.filterStatus\r\n        };\r\n        this.props.onFilterTable(filter);\r\n        this.setState({\r\n            [name] : value\r\n        });\r\n    }\r\n    render() {\r\n        var {tasks, filterTable, keyword, sort} = this.props; // var tasks = this.props.tasks\r\n        //filter\r\n        if(filterTable.name){\r\n            tasks = tasks.filter((task) =>{\r\n                return task.name.toLowerCase().indexOf(filterTable.name) !== -1;\r\n            });\r\n        }\r\n        if(filterTable.status !== null){\r\n            tasks = tasks.filter((task) =>{\r\n                if(filterTable.status === -1){\r\n                    return task;\r\n                }else{\r\n                    return task.status === (filterTable.status === 1?true:false);\r\n                }\r\n            });\r\n        }\r\n        //search\r\n        tasks = tasks.filter((task) =>{\r\n            return task.name.toLowerCase().indexOf(keyword) !== -1;\r\n        });\r\n        //sort\r\n        if(sort.by === 'name'){\r\n            tasks.sort( (a, b) =>{\r\n                if(a.name > b.name) return sort.value;\r\n                else if(a.name < b.name) return -sort.value;\r\n                else return 0;\r\n            });\r\n        }else{\r\n            tasks.sort( (a, b) =>{\r\n                if(a.status > b.status) return sort.value;\r\n                else if(a.status < b.status) return -sort.value;\r\n                else return 0;\r\n            });\r\n        }\r\n        //pull data\r\n        var {filterName, filterStatus} = this.state;\r\n        var elmTasks = tasks.map((task,index) =>{\r\n            return <TaskItem \r\n                        key={task.id} \r\n                        index={index} \r\n                        task={task}\r\n                    />\r\n        });\r\n        //render\r\n        return (\r\n            <table className=\"table table-bordered table-hover\">\r\n                <thead>\r\n                    <tr>\r\n                        <th className=\"text-center\">STT</th>\r\n                        <th className=\"text-center\">Tên</th>\r\n                        <th className=\"text-center\">Trạng Thái</th>\r\n                        <th className=\"text-center\">Hành Động</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td></td>\r\n                        <td>\r\n                            <input \r\n                                name=\"filterName\" \r\n                                value={filterName}\r\n                                onChange={this.onChange}\r\n                                type=\"text\" \r\n                                className=\"form-control\" \r\n                            />\r\n                        </td>\r\n                        <td>\r\n                            <select \r\n                                name=\"filterStatus\"\r\n                                value={filterStatus}\r\n                                onChange={this.onChange} \r\n                                className=\"form-control\"\r\n                            >\r\n                                <option value=\"-1\">Tất Cả</option>\r\n                                <option value=\"0\">Ẩn</option>\r\n                                <option value=\"1\">Kích Hoạt</option>\r\n                            </select>\r\n                        </td>\r\n                        <td></td>\r\n                    </tr>\r\n\r\n                    {elmTasks}\r\n                    \r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { \r\n        tasks : state.tasks,\r\n        filterTable: state.filterTable,\r\n        keyword: state.search,\r\n        sort: state.sort\r\n    }\r\n};\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n        onFilterTable : (filter) => {\r\n            dispatch(actions.filterTask(filter));\r\n        }\r\n    }\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskList);\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport TaskForm from './components/TaskForm';\nimport Control from './components/Control';\nimport TaskList from './components/TaskList';\nimport {connect} from 'react-redux';\nimport * as actions from './actions/index';\nclass App extends Component {\n\n    onToggleForm = () =>{\n        var { itemEditing } = this.props;\n        if(itemEditing && itemEditing.id !== ''){\n            this.props.onOpenForm();\n        }else{\n            this.props.onToggleForm();\n        }\n        this.props.onClearTask({\n            id: '',\n            name: '',\n            status: false\n        });\n    }\n\n    render() {\n        var { isDisplayForm } = this.props;\n        return (\n             <div className=\"container\">\n                <div className=\"text-center\">\n                    <h1>Quản Lý Công Việc</h1>\n                    <hr/>\n                </div>\n                <div className=\"row\">\n                    <div className={ isDisplayForm === true ? 'col-xs-4 col-sm-4 col-md-4 col-lg-4': ''}>\n                        <TaskForm/> \n                    </div>\n                    <div className={ isDisplayForm === true ? 'col-xs-8 col-sm-8 col-md-8 col-lg-8': 'col-xs-12 col-sm-12 col-md-12 col-lg-12'}>\n                        <button \n                            type=\"button\" \n                            className=\"btn btn-primary\"\n                            onClick = {this.onToggleForm}\n                        >\n                            <span className=\"fa fa-plus mr-5\"></span>Thêm Công Việc\n                        </button>\n                        <Control/>\n                        <div className=\"row mt-15\">\n                            <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n                                <TaskList />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isDisplayForm : state.isDisplayForm,\n        itemEditing: state.itemEditing\n    };\n};\nconst mapDispatchToProps = (dispatch, props) =>{\n    return {\n        onToggleForm : () =>{\n            dispatch(actions.toggleForm());\n        },\n        onClearTask : (task) =>{\n            dispatch(actions.editTask(task));\n        },\n        onOpenForm : () =>{\n            dispatch(actions.openForm());\n        }\n    };\n};\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as types from './../constants/ActionTypes';\r\nvar s4 =() =>{\r\n    return Math.floor((1+Math.random())* 0x10000).toString(16).substring(1);\r\n}\r\nvar randomID = () =>{\r\n    return s4() + s4() + \"-\" + s4() + \"-\" + s4() + \"-\" + s4()+ \"-\" + s4() + s4() + s4();\r\n}\r\nvar findIndex = (tasks, id) =>{\r\n    var result = -1;\r\n    tasks.forEach((task,index) =>{\r\n        if(task.id===id){\r\n            result =  index;\r\n        }\r\n    });\r\n    return result;\r\n}\r\n\r\nvar data = JSON.parse(localStorage.getItem('tasks'));\r\nvar initialState = data ? data : [];\r\n\r\nvar myReducer = (state = initialState, action) =>{\r\n    var id = '';\r\n    var index = -1;\r\n    switch (action.type){\r\n        case types.LIST_ALL:\r\n            return state;\r\n        case types.SAVE_TASK:\r\n            var temp = {\r\n                id : action.task.id,\r\n                name: action.task.name,\r\n                status: action.task.status\r\n            }\r\n            if(!temp.id){\r\n                temp.id = randomID();\r\n                state.push(temp);\r\n            }else{\r\n                index = findIndex(state, temp.id);\r\n                state[index] = temp;\r\n            }\r\n            localStorage.setItem('tasks', JSON.stringify(state));\r\n            return [...state];\r\n        case types.UPDATE_STATUS_TASK:\r\n            id = action.id;\r\n            index = findIndex(state, id);\r\n            //state[index].status = !state[index].status;\r\n           \r\n            // cach 1\r\n            //var cloneTask = {...state[index]}\r\n            //cloneTask.status = !cloneTask.status;\r\n            //state[index] = cloneTask;\r\n            // cach 2\r\n            state[index] = {\r\n                ...state[index],\r\n                status: ! state[index].status\r\n            }\r\n            localStorage.setItem('tasks',JSON.stringify(state));\r\n            return [...state];\r\n        case types.DELETE_TASK:\r\n            id = action.id;\r\n            index = findIndex(state, id);\r\n            state.splice(index, 1);\r\n            localStorage.setItem('tasks',JSON.stringify(state));\r\n            return [...state];\r\n        default: return state;\r\n    }\r\n};\r\nexport default myReducer;","import * as types from './../constants/ActionTypes';\r\n\r\nvar initialState = false;// close form\r\n\r\nvar myReducer = (state = initialState, action) =>{\r\n    switch (action.type){\r\n        case types.TOGGLE_FORM:\r\n            return !state;\r\n        case types.OPEN_FORM:\r\n            return true;\r\n        case types.CLOSE_FORM:\r\n            return false;\r\n        default: return state;\r\n    }\r\n};\r\nexport default myReducer;","import * as types from '../constants/ActionTypes';\r\n\r\nvar initialState = {\r\n    id: '',\r\n    name: '',\r\n    status: false\r\n};// close form\r\n\r\nvar myReducer = (state = initialState, action) =>{\r\n    switch (action.type){\r\n        case types.EDIT_TASK:\r\n            return action.task;\r\n        \r\n        default: return state;\r\n    }\r\n};\r\nexport default myReducer;","import * as types from '../constants/ActionTypes';\r\n\r\nvar initialState = {\r\n    name: '',\r\n    status: -1\r\n};// close form\r\n\r\nvar myReducer = (state = initialState, action) =>{\r\n    switch (action.type){\r\n        case types.FILTER_TABLE:\r\n            return {\r\n                name:  action.filter.name,\r\n                status: parseInt(action.filter.status,10)\r\n            };\r\n        default: return state;\r\n    }\r\n};\r\nexport default myReducer;","import * as types from '../constants/ActionTypes';\r\n\r\nvar initialState = '';//\r\n\r\nvar myReducer = (state = initialState, action) =>{\r\n    switch (action.type){\r\n        case types.SEARCH:\r\n            return action.keyword;\r\n        default: return state;\r\n    }\r\n};\r\nexport default myReducer;","import * as types from '../constants/ActionTypes';\r\n\r\nvar initialState = {\r\n    by: 'name',\r\n    value: 1\r\n};\r\n\r\nvar myReducer = (state = initialState, action) =>{\r\n    switch (action.type){\r\n        case types.SORT:\r\n            return {\r\n                by: action.sort.by,\r\n                value: action.sort.value\r\n            };\r\n        default: return state;\r\n    }\r\n};\r\nexport default myReducer;","import {combineReducers} from 'redux';\r\nimport tasks from './tasks';\r\nimport isDisplayForm from './isDisplayForm';\r\nimport itemEditing from './itemEditing';\r\nimport filterTable from './filterTable';\r\nimport search from './search';\r\nimport sort from './sort';\r\nconst myReducer = combineReducers({\r\n    tasks,// tasks: tasks\r\n    isDisplayForm, // isDisplayForm: isDisplayForm\r\n    itemEditing, // itemEditing: itemEditing\r\n    filterTable,\r\n    search,\r\n    sort\r\n});\r\n\r\nexport default myReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Store\nimport {createStore} from 'redux';\nimport myReducer from './reducers/index';\nimport {Provider} from 'react-redux';\nconst store = createStore(\n    myReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root')\n    );\nserviceWorker.unregister();\n"],"sourceRoot":""}